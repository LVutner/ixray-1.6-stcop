#include "common.h"
#include "lmodel.h"
#include "hmodel.h"

uniform	Texture2D s_half_depth;
uniform float3x4 m_v2w;

#ifdef HDAO
#define USE_HDAO 1
#endif

Texture2D<float> s_gtao;

#ifdef SM_5
Texture2D<float> s_occ;
#endif // SM_5

#if SSAO_QUALITY <=3
#include "ssao.ps"
#else
#ifndef USE_HDAO
#define USE_HDAO
#endif
#endif

#ifdef USE_HDAO
#if SSAO_QUALITY > 3
#include "ssao_hdao_new.ps"
#endif
#define USE_HDAO_CODE
#if SSAO_QUALITY <=3
#define g_f2RTSize (pos_decompression_params2.xy)

#define g_txDepth s_position
#define g_txNormal s_normal

#include "ssao_hdao.ps"
#endif
#else // USE_HDAO
#ifdef	USE_HBAO
#include "ssao_hbao.ps"
#endif	//	USE_HBAO
#endif // USE_HDAO

struct _input
{
	float4 tc0 : TEXCOORD0;
	float2 tcJ : TEXCOORD1;
	float4 pos2d : SV_Position;
};

//	TODO:	DX10: Replace Sample with Load
float4 main (_input I) : SV_Target
{
	gbuffer_data gbd = gbuffer_load_data(GLD_P(I.tc0, I.pos2d, ISAMPLE));

	// Sample the buffers:
	float4 P = float4( gbd.P, gbd.mtl ); // position.(mtl or sun)
	float4 N = float4( gbd.N, gbd.hemi ); // normal.hemi
	float4 D = float4( gbd.C, gbd.gloss ); // rgb.gloss
	float4 L = s_accumulator.Sample( smp_nofilter, I.tc0); // diffuse.specular

	// static sun
	float mtl = P.w;

#ifdef USE_R2_STATIC_SUN
	mtl = xmaterial;
	float sun_occ = P.w * 2;
	L += Ldynamic_color * sun_occ * plight_infinity(mtl, P.xyz, N.xyz, Ldynamic_dir);
#endif

	//  Calculate SSAO
#ifdef USE_HDAO
	#ifdef SM_5
		#if SSAO_QUALITY > 3
			float occ = s_occ.Sample( smp_nofilter, I.tc0);	
		#else // SSAO_QUALITY > 3
			float occ = calc_hdao(CS_P(P, N, I.tc0, I.tcJ, I.pos2d, ISAMPLE));
		#endif // SSAO_QUALITY > 3
	#else // SM_5
		#if SSAO_QUALITY > 3
			float occ = calc_new_hdao(CS_P(P, N, I.tc0, I.tcJ, I.pos2d, ISAMPLE));
		#else // SSAO_QUALITY > 3
			float occ = calc_hdao(CS_P(P, N, I.tc0, I.tcJ, I.pos2d, ISAMPLE));
		#endif // SSAO_QUALITY > 3
	#endif // SM_5
#else // USE_HDAO
	#ifdef USE_HBAO
		float occ = calc_hbao(P.z, N, I.tc0, I.pos2d);
	#else // USE_HBAO
		float occ = calc_ssao(CS_P(P, N, I.tc0, I.tcJ, I.pos2d, ISAMPLE));
	#endif
#endif // USE_HDAO

	float3 hdiffuse, hspecular;
	hmodel (hdiffuse, hspecular, mtl, N.w, D.w, P.xyz, N.xyz);
	hdiffuse *= occ; hspecular *= occ;

	float4 light = float4(L.xyz + hdiffuse, L.w);
	float4 C = D * light;
	float3 spec = C.www + hspecular;
	float3 color = C.xyz + spec;


	// here should be distance fog
	float fog = saturate(length(P.xyz) * fog_params.w + fog_params.x);
	color = lerp (color, fog_color, fog);

	return float4(color, fog * fog);
}

